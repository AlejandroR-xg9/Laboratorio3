import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class Main {
    private List<DoctorGeneral> doctors = new ArrayList<>();
    private List<Cita> citas = new ArrayList<>();

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new Main().createAndShowGui());
    }

    private void createAndShowGui() {
        JFrame frame = new JFrame("Sistema de Doctores y Citas");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1000, 600);

        JTabbedPane tabs = new JTabbedPane();

        // --- Panel Doctores -------------------------------------------------
        JPanel doctorPanel = new JPanel(new BorderLayout());
        JPanel docForm = new JPanel(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(4, 4, 4, 4);
        c.fill = GridBagConstraints.HORIZONTAL;

        JTextField dId = new JTextField(8);
    dId.setEditable(false); // ID auto-increment: not editable by the user
    // initialize ID display
    dId.setText(String.valueOf(doctors.size() + 1));
        

        JTextField dNombre = new JTextField(12);
        String[] dDepartamentos = { "Doctor General","Terapeuta", "Radiología", "Farmaceutica", "Enfermería", "Cirujano"};
        JComboBox<String> dDepartamentoCombo = new JComboBox<>(dDepartamentos);
        JTextField dExperiencia = new JTextField(6);

        JTextField dSalario = new JTextField(8);

    JTextField dEspecializacion = new JTextField(10);
    String[] dOpc = { "Pediatría", "Medicina interna", "Medicina familiar" };
    JComboBox<String> dEspecialidad = new JComboBox<>(dOpc);

    JLabel dEspecialidadLabel = new JLabel("Especialidad (rol):");


        int row = 0;
        c.gridx = 0;
        c.gridy = row;
        docForm.add(new JLabel("ID:"), c);
        c.gridx = 1;
        docForm.add(dId, c);
        c.gridx = 2;
        docForm.add(new JLabel("Nombre:"), c);
        c.gridx = 3;
        docForm.add(dNombre, c);

        row++;
        c.gridx = 0;
        c.gridy = row;
        docForm.add(new JLabel("Departamento:"), c);
        c.gridx = 1;
        docForm.add(dDepartamentoCombo, c);
        c.gridx = 2;
        docForm.add(new JLabel("Experiencia (años):"), c);
        c.gridx = 3;
        docForm.add(dExperiencia, c);

        row++;
        c.gridx = 0;
        c.gridy = row;
        docForm.add(new JLabel("Salario base:"), c);
        c.gridx = 1;
        docForm.add(dSalario, c);
    

    row++;
    c.gridx = 0;
    c.gridy = row;
    docForm.add(dEspecialidadLabel, c);
    c.gridx = 1;
    docForm.add(dEspecialidad, c);
    
    // removed extra 'otra' text field
        

        String[] docCols = { "ID", "Nombre", "Departamento", "Exp", "Salario", "Especializacion", "Especialidad",
                "Tarifa", "Pacientes/día" };
        DefaultTableModel docModel = new DefaultTableModel(docCols, 0) {
            @Override
            public boolean isCellEditable(int r, int c) {
                return false;
            }
        };
        JTable docTable = new JTable(docModel);

        JPanel docButtons = new JPanel();
        JButton docAdd = new JButton("Agregar Doctor");
        JButton docClear = new JButton("Limpiar campos");
        docButtons.add(docAdd);
        docButtons.add(docClear);

        doctorPanel.add(docForm, BorderLayout.NORTH);
        doctorPanel.add(new JScrollPane(docTable), BorderLayout.CENTER);
        doctorPanel.add(docButtons, BorderLayout.SOUTH);


        // --- Panel Citas -----------------------------------------------------
        JPanel citaPanel = new JPanel(new BorderLayout());
        JPanel citaForm = new JPanel(new GridBagLayout());
        GridBagConstraints cc = new GridBagConstraints();
        cc.insets = new Insets(4, 4, 4, 4);
        cc.fill = GridBagConstraints.HORIZONTAL;

        JTextField cId = new JTextField(8);
        JTextField cNombre = new JTextField(12);
        JComboBox<String> medicoCombo = new JComboBox<>();
        JTextField cFecha = new JTextField(10);
        JTextField cHora = new JTextField(8);
    String[] tipos = { "Consulta", "Terapia", "Seguimiento" };
    JComboBox<String> tipoCombo = new JComboBox<>(tipos);
        String[] estados = { "Pendiente", "Confirmada", "Cancelada" };
        JComboBox<String> estadoCombo = new JComboBox<>(estados);

        int cr = 0;
        cc.gridx = 0;
        cc.gridy = cr;
        citaForm.add(new JLabel("ID Cita:"), cc);
        cc.gridx = 1;
        citaForm.add(cId, cc);
        cc.gridx = 2;
        citaForm.add(new JLabel("Paciente Nombre:"), cc);
        cc.gridx = 3;
        citaForm.add(cNombre, cc);

        cr++;
        cc.gridx = 0;
        cc.gridy = cr;
        citaForm.add(new JLabel("Medico asignado:"), cc);
        cc.gridx = 1;
        cc.gridwidth = 3;
        citaForm.add(medicoCombo, cc);
        cc.gridwidth = 1;

        cr++;
        cc.gridx = 0;
        cc.gridy = cr;
        citaForm.add(new JLabel("Fecha (dd/mm/yyyy):"), cc);
        cc.gridx = 1;
        citaForm.add(cFecha, cc);
        cc.gridx = 2;
        citaForm.add(new JLabel("Hora (hh:mm):"), cc);
        cc.gridx = 3;
        citaForm.add(cHora, cc);

        cr++;
        cc.gridx = 0;
        cc.gridy = cr;
        citaForm.add(new JLabel("Tipo:"), cc);
        cc.gridx = 1;
        citaForm.add(tipoCombo, cc);
    // removed 'otra' text field for tipo

        cr++;
        cc.gridx = 0;
        cc.gridy = cr;
        citaForm.add(new JLabel("Estado:"), cc);
        cc.gridx = 1;
        citaForm.add(estadoCombo, cc);

        String[] citaCols = { "ID", "Paciente", "MedicoAsignado", "Fecha", "Hora", "Tipo", "Estado" };
        DefaultTableModel citaModel = new DefaultTableModel(citaCols, 0) {
            @Override
            public boolean isCellEditable(int r, int c) {
                return false;
            }
        };
        JTable citaTable = new JTable(citaModel);

        JPanel citaButtons = new JPanel();
        JButton citaAdd = new JButton("Agregar Cita");
        JButton citaClear = new JButton("Limpiar campos");
        citaButtons.add(citaAdd);
        citaButtons.add(citaClear);

        citaPanel.add(citaForm, BorderLayout.NORTH);
        citaPanel.add(new JScrollPane(citaTable), BorderLayout.CENTER);
        citaPanel.add(citaButtons, BorderLayout.SOUTH);

        // Add tabs
        tabs.addTab("Doctores", doctorPanel);
        tabs.addTab("Citas", citaPanel);

        frame.add(tabs);

        // map departments to specialization options (if any)
        java.util.Map<String, String[]> deptSpecs = new java.util.HashMap<>();
        deptSpecs.put("Doctor General", new String[]{"Pediatría", "Medicina interna", "Medicina familiar"});
        deptSpecs.put("Terapeuta", new String[]{"Física", "Ocupacional"});
        deptSpecs.put("Radiología", new String[]{"Rayos X", "Tomografía", "Resonancia Magnética"});
        deptSpecs.put("Farmaceutica", new String[]{"Vigente", "No vigente"});
        deptSpecs.put("Enfermería", new String[]{"Pediatría", "Medicina interna", "Medicina familiar"});
        deptSpecs.put("Cirujano", new String[]{"General", "Especialista"});

    // map departments to the label text shown next to the specialization combo
    java.util.Map<String, String> deptLabel = new java.util.HashMap<>();
    deptLabel.put("Doctor General", "Especialidad (rol):");
    deptLabel.put("Terapeuta", "Licencia:");
    deptLabel.put("Radiología", "Tipo de equipo:");
    deptLabel.put("Farmaceutica", "Licencia:");
    deptLabel.put("Enfermería", "Certificación:");
    deptLabel.put("Cirujano", "Tipo:");

        // show/hide and populate especializacion fields depending on departamento
        dDepartamentoCombo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String dep = (String) dDepartamentoCombo.getSelectedItem();
                String[] specs = deptSpecs.get(dep);
                boolean hasSpecs = specs != null && specs.length > 0;

    
                dEspecializacion.setVisible(hasSpecs);
                dEspecialidadLabel.setVisible(hasSpecs);
                dEspecialidad.setVisible(hasSpecs);

                // update label text according to department
                String labelText = deptLabel.get(dep);
                if (labelText != null) dEspecialidadLabel.setText(labelText);

                if (hasSpecs) {
                    dEspecialidad.removeAllItems();
                    for (String s : specs) dEspecialidad.addItem(s);
                    // no 'Otra' option: keep the given specializations only
                } else {
                    // clear inputs when no specs
                    dEspecializacion.setText("");
                    dEspecialidad.removeAllItems();
                }
            }
        });

        // initialize visibility and options based on default selection
        ActionEvent ae = new ActionEvent(dDepartamentoCombo, ActionEvent.ACTION_PERFORMED, "init");
        for (ActionListener al : dDepartamentoCombo.getActionListeners()) al.actionPerformed(ae);

        // --- Actions: Doctores ----------------------------------------------
        docAdd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    // auto assign id based on current number of doctors
                    int id = doctors.size() + 1;
                    String nombre = dNombre.getText().trim();
                    String departamento = (String) dDepartamentoCombo.getSelectedItem();
                    int experiencia = Integer.parseInt(dExperiencia.getText().trim());
                    int salario = Integer.parseInt(dSalario.getText().trim());
                    String especializacion = "";
                    String especialidad = "";
                    // only read especializacion/especialidad if visible (affects tarifa/salario)
                    if (dEspecializacion.isVisible()) {
                        especializacion = dEspecializacion.getText().trim();
                    }
                    if (dEspecialidad.isVisible()) {
                        especialidad = (String) dEspecialidad.getSelectedItem();
                        // no 'Otra' option anymore
                    }

                    DoctorGeneral dg = new DoctorGeneral(id, nombre, departamento, experiencia, salario,
                            especializacion, especialidad);
                    dg.asignarCaracteristicas(especializacion);
                    dg.salario(salario);
                    doctors.add(dg);
                    // determine values to display for specialization columns
                    String displayEspecializacion = dg.getEspecializacion() != null ? dg.getEspecializacion() : "";
                    String displayEspecialidad = dg.getEspecialidad() != null ? dg.getEspecialidad() : "";
                    // if department has no specs, show empty strings
                    if (!deptSpecs.containsKey(dg.getDepartamento())) {
                        displayEspecializacion = "";
                        displayEspecialidad = "";
                    }
                    docModel.addRow(new Object[] { dg.getId(), dg.getNombre(), dg.getDepartamento(), dg.getExperiencia(), dg.getSalario(), displayEspecializacion, displayEspecialidad, dg.getTarifa(), dg.getPacientesporDia() });

                    // update medicoCombo
                    medicoCombo.addItem("Doctor: " + dg.getNombre() + " (ID:" + dg.getId() + ")");

                    // update ID field to next available id
                    dId.setText(String.valueOf(doctors.size() + 1));
                    dNombre.setText("");
                    dDepartamentoCombo.setSelectedIndex(0);
                    dExperiencia.setText("");
                    dSalario.setText("");
                    dEspecializacion.setText("");
                    dEspecialidad.setSelectedIndex(0);

                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(frame, "ID, experiencia y salario deben ser números.", "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        docClear.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                    dId.setText(String.valueOf(doctors.size() + 1)); // Update ID based on doctors.size()
                dNombre.setText("");
                dDepartamentoCombo.setSelectedIndex(0);
                dExperiencia.setText("");
                dSalario.setText("");
                dEspecializacion.setText("");
                dEspecialidad.setSelectedIndex(0);
            }
        });


        // --- Actions: Citas ------------------------------------------------
        citaAdd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    int id = Integer.parseInt(cId.getText().trim());
                    String paciente = cNombre.getText().trim();
                    String medicoAsignado = (String) medicoCombo.getSelectedItem();
                    String fecha = cFecha.getText().trim();
                    String hora = cHora.getText().trim();
                    String tipo = (String) tipoCombo.getSelectedItem();
                    String estado = (String) estadoCombo.getSelectedItem();

                    Cita cita = new Cita(id, paciente, medicoAsignado, fecha, hora, tipo, estado);
                    citas.add(cita);
                    citaModel.addRow(new Object[] { cita.getId(), cita.getNombre(), cita.getMedicoAsignado(),
                            cita.getFecha(), cita.getHora(), cita.getTipo(), cita.getEstado() });
                    cId.setText("");
                    cNombre.setText("");
                    cFecha.setText("");
                    cHora.setText("");
                    tipoCombo.setSelectedIndex(0);
                    estadoCombo.setSelectedIndex(0);

                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(frame, "El ID de la cita debe ser un número.", "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        citaClear.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                cId.setText("");
                cNombre.setText("");
                cFecha.setText("");
                cHora.setText("");
                    tipoCombo.setSelectedIndex(0);
                estadoCombo.setSelectedIndex(0);
            }
        });

        // Show frame
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
